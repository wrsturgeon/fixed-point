#ifndef FIXED_POINT_HPP
#define FIXED_POINT_HPP

#include <array>        // for std::array
#include <bit>          // for std::bit_width
#include <cassert>      // for assert
#include <cmath>        // for ldexp, ldexpf, std::ldexp, std::ldexpf
#include <concepts>     // for std::integral, std::same_as, std::unsigned_integral
#include <cstddef>      // for std::size_t
#include <cstdint>      // for std::_int#_t
#include <cstdlib>      // for abs, size_t, std::size_t
#include <cxxabi.h>     // for abi::__cxa_demangle
#include <type_traits>  // for std::conditional_t

extern "C" {
#include <limits.h>     // for CHAR_BIT
}

#ifndef FP_NOSTR
#include <iomanip>      // for std::fixed
#include <iostream>     // for std::string, std::__1::operator<<, std::ostream
#include <sstream>      // for std::stringstream
#include <string>       // for std::allocator, std::operator+, std::char_traits, std::basic_string, std::to_string
#else // FP_NOSTR
#if FP_NOSTR != 1
#error "FP_NOSTR must be either not defined or defined to 1"
#endif // FP_NOSTR != 1
#endif // FP_NOSTR

#define FP_INLINE [[gnu::always_inline]] inline
#define FP_IMPURE [[nodiscard]] FP_INLINE
#define FP_PURE FP_IMPURE constexpr

namespace fp {

namespace util {

// cstdint types with templated bit width
template <std::size_t B> struct s_int_struct {};
template <std::size_t B> struct u_int_struct {};
// NOLINTNEXTLINE(cppcoreguidelines-macro-usage)
#define MAKEINT(B) template <> struct s_int_struct<B##U> { using type = std::int##B##_t; }; template <> struct u_int_struct<B##U> { using type = std::uint##B##_t; };
MAKEINT(8)
MAKEINT(16)
MAKEINT(32)
#ifndef FP_NO64
MAKEINT(64)
} // namespace util
inline constexpr std::size_t max_bits = 64;
#else
} // namespace util
inline constexpr std::size_t max_bits = 32;
#if (FP_NO64 != 1)
#error FP_NO64 must be either undefined or set to 1; setting to 0 does not disable
#endif // (FP_NO64 != 1)
#endif // FP_NO64
#undef MAKEINT
inline constexpr std::size_t half_bits = (max_bits >> 1);
namespace util {
template <typename S> concept valid_sign = std::same_as<S, signed> or std::same_as<S, unsigned>;
template <std::size_t B> using s_int = typename s_int_struct<B>::type;
template <std::size_t B> using u_int = typename u_int_struct<B>::type;
template <std::size_t B, valid_sign S> using int_b = std::conditional_t<std::is_signed_v<S>, s_int<B>, u_int<B>>;

// Bad implementation but constexpr. Use only at compile time.
template <auto x, std::size_t hypothesis = CHAR_BIT> requires ((x >= 0) and (hypothesis <= max_bits))
inline constexpr std::decay_t<decltype(x)> byte_pow2_ceil = []{
  static_assert(hypothesis <= max_bits, "byte_pow2_ceil returned a number of bits greater than the system maximum (chang with macro FP_NO64)");
  if constexpr (x > hypothesis) return byte_pow2_ceil<x, (hypothesis << 1)>; else return hypothesis;
}();

// Log of size_t, which is in turn log of memory space.
// Note that setting a minimum of 16 is purely to stop the C++ demangler from printing u/int8_t values as characters.
inline constexpr auto  lg_size = byte_pow2_ceil<    static_cast<std::size_t>(std::bit_width(sizeof(std::size_t) << 3))>;
inline constexpr auto lg_ssize = byte_pow2_ceil<1 + static_cast<std::size_t>(std::bit_width(sizeof(std::size_t) << 3))>;
using  lg_size_t = int_b<( lg_size < 16) ? 16 :  lg_size, unsigned>;
using lg_ssize_t = int_b<(lg_ssize < 16) ? 16 : lg_ssize,   signed>;

template <lg_ssize_t Amount, typename T> inline constexpr bool shift_not_absurd = ((Amount < 0) ? -Amount : Amount) < (sizeof(std::decay_t<T>) << 3);

// Bit-shifting operators that sidestep undefined behavior with negative shifts
template <lg_ssize_t Amount, typename T>
FP_PURE
std::decay_t<T>
rshift(T&& v)
noexcept {
  static_assert(shift_not_absurd<Amount, T>, "Shifting more bits than exist in the type");
  if constexpr (Amount == 0) {
    return std::forward<T>(v);
  } else {
    if constexpr (Amount < 0) {
      if(v!=(static_cast<std::decay_t<T>>(                v  << -Amount) >> -Amount)) { std::cerr << '(' << abi::__cxa_demangle(typeid(std::decay_t<T>).name(), nullptr, nullptr, nullptr) << ")(" << +v << ") can't be shifted left " << -Amount << " bits\n"; std::terminate(); }
      return static_cast<std::decay_t<T>>(std::forward<T>(v) << -Amount);
    } else {
      return static_cast<std::decay_t<T>>(std::forward<T>(v) >>  Amount);
    }
  }
}

template <lg_ssize_t Amount, typename T>
FP_PURE
std::decay_t<T>
lshift(T&& v)
noexcept {
  static_assert(shift_not_absurd<Amount, T>, "Shifting more bits than exist in the type");
  if constexpr (Amount == 0) {
    return std::forward<T>(v);
  } else {
    if constexpr (Amount < 0) {
      return static_cast<std::decay_t<T>>(std::forward<T>(v) >> -Amount);
    } else {
      if(v!=(static_cast<std::decay_t<T>>(                v  <<  Amount) >> Amount)) { std::cerr << '(' << abi::__cxa_demangle(typeid(std::decay_t<T>).name(), nullptr, nullptr, nullptr) << ")(" << +v << ") can't be shifted left " << +Amount << " bits\n"; std::terminate(); }
      return static_cast<std::decay_t<T>>(std::forward<T>(v) <<  Amount);
    }
  }
}

template <typename T> using      signedness = std::conditional_t<std::is_signed_v<typename std::decay_t<T>::s>, signed, unsigned>;
template <typename T> using flip_signedness = std::conditional_t<std::is_signed_v<typename std::decay_t<T>::s>, unsigned, signed>;

FP_PURE std::uint8_t dec_capacity(std::uint8_t bin_capacity) noexcept {
  std::size_t const total = (static_cast<std::size_t>(1) << bin_capacity);
  std::uint8_t d = 0;
  std::size_t exp = 1;
  while (total > exp) { ++d; exp *= 10; }
  return d;
}

template <std::size_t... N> struct product_s;
template <> struct product_s<> { static constexpr std::size_t value = 1; };
template <std::size_t N, std::size_t... Ns> struct product_s<N, Ns...> { static constexpr std::size_t value = N * product_s<Ns...>::value; };
template <std::size_t... N> inline constexpr std::size_t product = product_s<N...>::value;

template <std::size_t... N> struct head_s;
template <std::size_t N, std::size_t... Ns> struct head_s<N, Ns...> { static constexpr std::size_t value = N; };
template <std::size_t... N> inline constexpr std::size_t head = head_s<N...>::value;

template <std::size_t N, std::array<std::size_t, N> shape, typename... T>
FP_PURE static
std::size_t
index(T&&... i)
noexcept {
  static_assert(sizeof...(i) == N, "Indexing requires the same number of indices as dimensions.");
  std::size_t const indices[] = { static_cast<std::size_t>(std::forward<T>(i))... };
  std::size_t idx = 0;
  std::size_t stride = 1;
  #pragma unroll
  for (std::size_t j = 0; j < N; ++j) {
    idx += indices[j] * stride;
    stride *= shape[j];
  }
  return idx;
}

} // namespace util

template <util::lg_size_t B, util::valid_sign S, util::lg_ssize_t R, bool const_ref> struct fmt;

namespace util {
template <typename T> struct is_format_s { static constexpr bool value = false; };
template <util::lg_size_t B, util::valid_sign S, util::lg_ssize_t R, bool C> struct is_format_s<fmt<B, S, R, C>> { static constexpr bool value = true; };
template <typename T> struct format_const_s;
template <typename T> struct format_non_const_s;
template <util::lg_size_t B, util::valid_sign S, util::lg_ssize_t R, bool C> struct format_const_s<fmt<B, S, R, C>> { using type = fmt<B, S, R, true>; };
template <util::lg_size_t B, util::valid_sign S, util::lg_ssize_t R, bool C> struct format_non_const_s<fmt<B, S, R, C>> { using type = fmt<B, S, R, false>; };
template <typename T> using format_const = typename util::format_const_s<::std::decay_t<T>>::type;
template <typename T> using format_non_const = typename util::format_non_const_s<::std::decay_t<T>>::type;
} // namespace util
template <typename T> concept format = util::is_format_s<::std::decay_t<T>>::value;

template <format F, std::size_t... N> struct t;

template <util::lg_size_t B, util::valid_sign S = signed, util::lg_ssize_t R = B - std::is_signed_v<S>, bool const_ref = false>
struct fmt {
  using self_t = fmt<B, S, R, const_ref>;
  static constexpr util::lg_size_t b = B;
  static_assert(b <= max_bits);
  static constexpr util::lg_size_t b_actual = util::byte_pow2_ceil<b>;
  static constexpr util::lg_ssize_t r = R;
  using s = S;
  static constexpr bool c = const_ref;
  static constexpr bool sign_bits = std::is_signed_v<s>;
  using internal_t = util::int_b<b_actual, s>;
  using internal_maybe_const_t = std::conditional_t<const_ref, internal_t const, internal_t>;
  internal_maybe_const_t& internal; // NOLINT(cppcoreguidelines-non-private-member-variables-in-classes)
  static constexpr util::lg_ssize_t fractional_bits = r;
  static constexpr util::lg_ssize_t integral_bits = b - fractional_bits - sign_bits;
  static constexpr std::uint8_t integral_decimal = util::dec_capacity((  integral_bits > 1) ?   integral_bits : 1);
  static constexpr std::uint8_t fraction_decimal = util::dec_capacity((fractional_bits > 1) ? fractional_bits : 1);
  FP_INLINE constexpr explicit fmt(internal_maybe_const_t& x) noexcept : internal{x} {}
  FP_INLINE constexpr fmt(self_t const&) noexcept = default;
  FP_INLINE constexpr fmt(self_t&&) noexcept = default;
  FP_INLINE constexpr self_t& operator= (  self_t  const& x) noexcept requires (not const_ref) { internal  =           x .internal; return *this; }
  FP_INLINE constexpr self_t& operator= (  self_t      && x) noexcept requires (not const_ref) { internal  = std::move(x).internal; return *this; }
  FP_INLINE constexpr self_t& operator= (t<self_t> const& x) noexcept requires (not const_ref) { internal  =           x .data[0] ; return *this; }
  FP_INLINE constexpr self_t& operator= (t<self_t>     && x) noexcept requires (not const_ref) { internal  = std::move(x).data[0] ; return *this; }
  FP_INLINE constexpr self_t& operator+=(  self_t  const& x) noexcept requires (not const_ref) { internal +=           x .internal; return *this; }
  FP_INLINE constexpr self_t& operator+=(  self_t      && x) noexcept requires (not const_ref) { internal += std::move(x).internal; return *this; }
  FP_INLINE constexpr self_t& operator+=(t<self_t> const& x) noexcept requires (not const_ref) { internal +=           x .data[0] ; return *this; }
  FP_INLINE constexpr self_t& operator+=(t<self_t>     && x) noexcept requires (not const_ref) { internal += std::move(x).data[0] ; return *this; }
  FP_INLINE constexpr self_t& operator-=(  self_t  const& x) noexcept requires (not const_ref) { internal -=           x .internal; return *this; }
  FP_INLINE constexpr self_t& operator-=(  self_t      && x) noexcept requires (not const_ref) { internal -= std::move(x).internal; return *this; }
  FP_INLINE constexpr self_t& operator-=(t<self_t> const& x) noexcept requires (not const_ref) { internal -=           x .data[0] ; return *this; }
  FP_INLINE constexpr self_t& operator-=(t<self_t>     && x) noexcept requires (not const_ref) { internal -= std::move(x).data[0] ; return *this; }
  template <format F> requires (not std::same_as<F, self_t>) FP_INLINE constexpr self_t& operator=(F        && x) noexcept requires (not const_ref) { return this->operator=(reformat<self_t>(std::forward<F>(x))); }
  template <format F> requires (not std::same_as<F, self_t>) FP_INLINE constexpr self_t& operator=(t<F> const& x) noexcept requires (not const_ref) { return this->operator=(          x .get_unrolled(0U)); }
  template <format F> requires (not std::same_as<F, self_t>) FP_INLINE constexpr self_t& operator=(t<F>     && x) noexcept requires (not const_ref) { return this->operator=(std::move(x).get_unrolled(0U)); }
  FP_IMPURE explicit operator float() const noexcept requires (static_cast<int>(r) == r) { return std::ldexpf(static_cast<float>(internal), static_cast<int>(-r)); }
  FP_IMPURE explicit operator double() const noexcept requires (static_cast<int>(r) == r) { return std::ldexp(static_cast<double>(internal), static_cast<int>(-r)); }
#ifndef FP_NOSTR
  FP_IMPURE explicit operator std::string() const noexcept { return (std::stringstream{} << std::fixed << std::setw(sign_bits + integral_decimal + 1 + fraction_decimal) << std::setprecision(fraction_decimal) << (operator double())).str(); }
#endif // FP_NOSTR
};

namespace util {
template <format F> using   make_signed = fmt<(std::decay_t<F>::b < max_bits) ? std::decay_t<F>::b + not std::decay_t<F>::sign_bits : max_bits,   signed, std::decay_t<F>::r, std::decay_t<F>::c>;
template <format F> using make_unsigned = fmt<                                  std::decay_t<F>::b -     std::decay_t<F>::sign_bits           , unsigned, std::decay_t<F>::r, std::decay_t<F>::c>;
template <typename T> struct is_fixed_point_s { static constexpr bool value = false; };
template <format F, std::size_t... N> struct is_fixed_point_s<t<F, N...>> { static constexpr bool value = true; };
} // namespace util
template <typename T> concept any = util::is_fixed_point_s<::std::decay_t<T>>::value;

namespace util {
template <any... T> struct sum_of_sizes_s;
template <> struct sum_of_sizes_s<> { static constexpr std::size_t value = 0; };
template <any T, any... Ts> struct sum_of_sizes_s<T, Ts...> { static constexpr std::size_t value = std::decay_t<T>::size + sum_of_sizes_s<Ts...>::value; };
template <any... T> inline constexpr std::size_t sum_of_sizes = sum_of_sizes_s<T...>::value;
template <format F2, any T> struct with_format_s;
template <format F2, format F1, std::size_t... N> struct with_format_s<F2, t<F1, N...>> { using type = t<std::decay_t<F2>, N...>; };
} // namespace util
template <format F2, any T> using with_format = typename util::with_format_s<std::decay_t<F2>, std::decay_t<T>>::type;

template <format F, std::size_t... N>
struct t {
  using self_t = t<F, N...>;
  using f = std::decay_t<F>;
  static constexpr auto b = f::b;
  static constexpr auto b_actual = f::b_actual;
  static constexpr auto r = f::r;
  using s = typename f::s;
  static constexpr auto c = f::c;
  static constexpr auto sign_bits = f::sign_bits;
  static constexpr auto fractional_bits = f::fractional_bits;
  static constexpr auto integral_bits = f::integral_bits;
  static constexpr auto integral_decimal = f::integral_decimal;
  static constexpr auto fraction_decimal = f::fraction_decimal;
  using data_t = typename f::internal_t;
  // using internal_t = data_t;
  static constexpr auto ndim = sizeof...(N);
  static constexpr auto size = util::product<N...>;
  static constexpr std::array<std::size_t, ndim> shape{N...};
  static constexpr bool trivial = (size == 1);
// Member variable
  std::array<data_t, size> data; // NOLINT(cppcoreguidelines-non-private-member-variables-in-classes)
// Multi-element constructors
  template <     any... T> requires ((sizeof...(T) >     1) and (             std::decay_t<T>::trivial and ...)) FP_INLINE constexpr t(T&&... z) noexcept : data{                    std::forward<T>(z).data[0]...} {}
  template <typename... T> requires ((sizeof...(T) == size) and (std::same_as<std::decay_t<T>, data_t> and ...)) FP_INLINE constexpr t(T&&... z) noexcept : data{static_cast<data_t>(std::forward<T>(z)       )...} {}
  FP_INLINE constexpr t(std::array<data_t, size> const& internal_array) noexcept : data{          internal_array } {}
  FP_INLINE constexpr t(std::array<data_t, size>     && internal_array) noexcept : data{std::move(internal_array)} {}
// Constructors
  template <any    T2> requires ((size == std::decay_t<T2>::size) and not std::same_as<std::decay_t<T2>, self_t>) FP_INLINE constexpr t(T2&& x) noexcept : self_t{reformat<F>(std::forward<T2>(x)).data} {}
  template <format F2> requires ((size ==                      1) and not std::same_as<             F2 ,      F>) FP_INLINE constexpr t(F2&& x) noexcept : self_t{reformat<F>(std::forward<F2>(x)).data} {}
  FP_INLINE constexpr                 t(               ) noexcept                    /* UNINITIALIZED */           {}
  FP_INLINE constexpr                 t(self_t     && x) noexcept                    : data{std::move(x.data    )} {}
  FP_INLINE constexpr                 t(self_t const& x) noexcept                    : data{          x.data     } {}
  FP_INLINE constexpr                 t(F          && x) noexcept requires (trivial) : data{std::move(x.internal)} {}
  FP_INLINE constexpr                 t(F      const& x) noexcept requires (trivial) : data{          x.internal } {}
  FP_INLINE constexpr                 t(data_t     && x) noexcept                    { data.fill(std::move(x));  }
  FP_INLINE constexpr                 t(data_t const& x) noexcept                    { data.fill(          x );  }
// operator=
  FP_INLINE constexpr self_t& operator=(self_t     && x) noexcept                    { new (this) self_t{std::move(x)}; return *this; }
  FP_INLINE constexpr self_t& operator=(self_t const& x) noexcept                    { new (this) self_t{          x }; return *this; }
  FP_INLINE constexpr self_t& operator=(F          && x) noexcept requires (trivial) { new (this) self_t{std::move(x)}; return *this; }
  FP_INLINE constexpr self_t& operator=(F      const& x) noexcept requires (trivial) { new (this) self_t{          x }; return *this; }
  template <any    T2> FP_INLINE constexpr self_t& operator=(T2&& x) noexcept { return operator=(reformat<F>(std::forward<T2>(x))); }
  template <format F2> FP_INLINE constexpr self_t& operator=(F2&& x) noexcept { return operator=(reformat<F>(std::forward<F2>(x))); }
// Indexing
  template <typename    T> requires                              std::unsigned_integral<std::decay_t<T>>           FP_PURE util::format_non_const<f> get_unrolled(T&&    index  )       noexcept { assert(index < size); return util::format_non_const<f>{data[index]}; }
  template <typename    T> requires                              std::unsigned_integral<std::decay_t<T>>           FP_PURE util::format_const    <f> get_unrolled(T&&    index  ) const noexcept { assert(index < size); return util::format_const    <f>{data[index]}; }
  template <typename... T> requires ((sizeof...(T) == ndim) and (std::unsigned_integral<std::decay_t<T>> and ...)) FP_PURE util::format_non_const<f> operator[]  (T&&... indices)       noexcept { return get_unrolled(util::index<ndim, shape>(std::forward<T>(indices)...)); }
  template <typename... T> requires ((sizeof...(T) == ndim) and (std::unsigned_integral<std::decay_t<T>> and ...)) FP_PURE util::format_const    <f> operator[]  (T&&... indices) const noexcept { return get_unrolled(util::index<ndim, shape>(std::forward<T>(indices)...)); }
// Broadcasting
  // template <any T> requires (std::decay_t<T>::size == size) FP_PURE operator T() const noexcept { return std::decay_t<T>{*this}; }
};

template <util::lg_ssize_t I>
inline constexpr t<fmt<
  std::bit_width(static_cast<std::size_t>((I < 0) ? -I : I)) + (I < 0),
  std::conditional_t<(I < 0), signed, unsigned>, 0>>
from_int = {I};



// Reformat an argument to take the same value (save for precision & overflow) in a different underlying format.
template <format F1, format F2>
FP_PURE static
t<std::decay_t<F1>>
reformat(F2&& x)
noexcept {
  using f1 = std::decay_t<F1>;
  using f2 = std::decay_t<F2>;
  using pre_shift_t = util::int_b<util::byte_pow2_ceil<(f2::b > f1::b) ? f2::b : f1::b>, typename f2::s>;
  return static_cast<typename f1::internal_t>(util::lshift<f1::r - f2::r>(static_cast<pre_shift_t>(std::forward<f2>(x).internal)));
}

// Reformat an argument to take the same value (save for precision & overflow) in a different underlying format.
template <util::lg_size_t B, util::valid_sign S = signed, util::lg_ssize_t R = B - std::is_signed_v<S>, bool C = false, format F>
FP_PURE static
t<fmt<B, S, R, C>>
reformat(F&& x)
noexcept {
  return reformat<fmt<B, S, R, C>>(std::forward<F>(x));
}

// Reformat an argument to take the same value (save for precision & overflow) in a different underlying format.
template <format F, any T>
FP_PURE static
with_format<F, T>
reformat(T&& x)
noexcept {
  with_format<F, T> y;
  for (std::size_t i = 0; i < std::decay_t<T>::size; ++i) {
    y.get_unrolled(i) = reformat<F>(std::forward<T>(x).get_unrolled(i));
  }
  return y;
}

// Reformat an argument to take the same value (save for precision & overflow) in a different underlying format.
template <util::lg_size_t B, util::valid_sign S = signed, util::lg_ssize_t R = B - std::is_signed_v<S>, bool C = false, any T>
FP_PURE static
with_format<fmt<B, S, R, C>, T>
reformat(T&& x)
noexcept {
  return reformat<fmt<B, S, R, C>>(std::forward<T>(x));
}

// // Reformat an argument to take up at most half the maximum number of bits (to multiply safely with another half-max number)
// template <typename T>
// FP_PURE static
// decltype(auto)
// mul_safe(T&& x)
// noexcept {
//   static constexpr auto b = (half_bits < std::decay_t<T>::b) ? half_bits : std::decay_t<T>::b;
//   return reformat<fmt<b, typename std::decay_t<T>::s, std::decay_t<T>::r - (std::decay_t<T>::b - b)>>(std::forward<T>(x));
// }



//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Ops on fp::f / formats (returning concrete one-element tensors, not formats, which are references)

// Bit-shifting by a known amount (can be negative!). This DOES NOT immediately change anything about the underlying bits; instead, it moves the templated radix point.
template <util::lg_ssize_t Amount, format F>
FP_PURE static
t<fmt<std::decay_t<F>::b, typename std::decay_t<F>::s, std::decay_t<F>::r - Amount>>
lshift(F&& x)
noexcept {
  // https://stackoverflow.com/questions/54709377/how-to-perfect-forward-a-member-variable
  return t<fmt<std::decay_t<F>::b, typename std::decay_t<F>::s, std::decay_t<F>::r - Amount>>{std::forward<F>(x).internal};
}

// Bit-shifting by a known amount (can be negative!). This DOES NOT immediately change anything about the underlying bits; instead, it moves the templated radix point.
template <util::lg_ssize_t Amount, format F>
FP_PURE static
t<fmt<std::decay_t<F>::b, typename std::decay_t<F>::s, std::decay_t<F>::r + Amount>>
rshift(F&& x)
noexcept {
  return t<fmt<std::decay_t<F>::b, typename std::decay_t<F>::s, std::decay_t<F>::r + Amount>>{std::forward<F>(x).internal};
}

// Bit-shifting by an unknown amount. Immediately bit-shifts the underlying representation without changing template parameters.
template <format F>
FP_PURE static
t<std::decay_t<F>>
lshift(F&& x, util::lg_size_t z)
noexcept {
  return t<std::decay_t<F>>{(std::forward<F>(x).internal << z)};
}

// Bit-shifting by an unknown amount. Immediately bit-shifts the underlying representation without changing template parameters.
template <format F>
FP_PURE static
t<std::decay_t<F>>
rshift(F&& x, util::lg_size_t z)
noexcept {
  return t<std::decay_t<F>>{(std::forward<F>(x).internal >> z)};
}

// Addition. Always returns the same type as the first argument, adjusting precision of the second to match.
template <format F1, format F2>
FP_PURE static
t<std::decay_t<F1>>
operator+(F1&& x, F2&& z)
noexcept {
  return t<std::decay_t<F1>>{
    static_cast<typename std::decay_t<F1>::internal_t>(
      std::forward<F1>(x).internal + reformat<F1>(std::forward<F2>(z)).data[0]
    )
  };
}

// Subtraction. Always returns the same type as the first argument, adjusting precision of the second to match.
template <format F1, format F2>
FP_PURE static
t<std::decay_t<F1>>
operator-(F1&& x, F2&& z)
noexcept {
  return t<std::decay_t<F1>>{
    static_cast<typename std::decay_t<F1>::internal_t>(
      std::forward<F1>(x).internal - reformat<F1>(std::forward<F2>(z)).data[0]
    )
  };
}

namespace util {
template <typename F1, typename F2> requires requires { typename std::decay_t<F1>::s; typename std::decay_t<F1>::s; } inline constexpr bool both_signed = std::is_signed_v<typename std::decay_t<F1>::s> and std::is_signed_v<typename std::decay_t<F2>::s>;
template <typename F1, typename F2> requires requires { typename std::decay_t<F1>::s; typename std::decay_t<F1>::s; } inline constexpr bool either_signed = std::is_signed_v<typename std::decay_t<F1>::s> or std::is_signed_v<typename std::decay_t<F2>::s>;
template <typename F1, typename F2> requires requires { typename std::decay_t<F1>::s; typename std::decay_t<F1>::s; } using both_signed_t = std::conditional_t<both_signed<F1, F2>, signed, unsigned>;
template <typename F1, typename F2> requires requires { typename std::decay_t<F1>::s; typename std::decay_t<F1>::s; } using either_signed_t = std::conditional_t<either_signed<F1, F2>, signed, unsigned>;
} // namespace util


// Multiplication. Returns neither T1 nor T2; instead, returns exactly enough to prevent overflow (usually the sum of the input bits).
template <format T1, format T2>
FP_PURE static
decltype(auto)
operator*(T1&& x, T2&& z)
noexcept {
  using t1 = std::decay_t<T1>;
  using t2 = std::decay_t<T2>;
  static constexpr bool both_signed = util::both_signed<t1, t2>;
  static constexpr util::lg_size_t return_b = t1::b + t2::b - both_signed;
  if constexpr (return_b > max_bits) {
    static constexpr util::lg_size_t shift = return_b - max_bits;
    if constexpr (t2::b < half_bits) {
      static_assert(decltype(operator*(reformat<t1::b - shift, typename t1::s, t1::r - shift>(std::forward<T1>(x)), std::forward<T2>(z)))::b == max_bits);
      return operator*(reformat<t1::b - shift, typename t1::s, t1::r - shift>(std::forward<T1>(x)), std::forward<T2>(z));
    } else if constexpr (t1::b < half_bits) {
      static_assert(decltype(operator*(reformat<t2::b - shift, typename t2::s, t2::r - shift>(std::forward<T2>(z)), std::forward<T1>(x)))::b == max_bits);
      return operator*(reformat<t2::b - shift, typename t2::s, t2::r - shift>(std::forward<T2>(z)), std::forward<T1>(x));
    } else {
      static constexpr util::lg_size_t t1b = half_bits + both_signed;
      static constexpr util::lg_size_t t2b = half_bits;
      static constexpr auto shift1 = t1::b - t1b;
      static constexpr auto shift2 = t2::b - t2b;
      return operator*(reformat<t1b, typename t1::s, t1::r - shift1>(std::forward<T1>(x)), reformat<t2b, typename t2::s, t2::r - shift2>(std::forward<T2>(z)));
    }
  } else {
    // if constexpr (std::same_as<t1, fp::fmt<8, signed, 0, false>> and std::same_as<t2, fp::fmt<32, signed, 16, false>>) {
    //   std::cout << "MULTIPLY: " << x << " * " << z << " = " << mul_safe(x) << ".data[0] * " << mul_safe(z) << ".data[0] = " << mul_safe(x).data[0] << " * " << mul_safe(z).data[0] << " = " << (mul_safe(std::forward<T1>(x)).data[0] * mul_safe(std::forward<T2>(z)).data[0]) << '\n';
    // }
    return t<fmt<return_b, util::either_signed_t<T1, T2>, std::decay_t<T1>::r + std::decay_t<T2>::r>>{
      std::forward<T1>(x).internal * std::forward<T2>(z).internal
    };
  }
}

// Negation.
template <format F>
FP_PURE static
t<util::make_signed<F>>
operator-(F&& x)
noexcept {
  if constexpr ((not std::decay_t<F>::sign_bits) and (std::decay_t<F>::b == max_bits)) { assert(0 == (x.internal & (1U << (max_bits - 1)))); }
  return t<util::make_signed<F>>{static_cast<typename util::make_signed<F>::internal_t>(-std::forward<F>(x).internal)};
}

template <format F>
FP_PURE static
t<std::decay_t<F>>
operator<<(F&& x, std::unsigned_integral auto z)
noexcept {
  return t<std::decay_t<F>>{x.internal << z};
}

// Increments ONLY ONE ULP, not by 1.0 each time.
template <format F>
FP_PURE static
std::decay_t<F>/*&*/
operator++(F&& x)
noexcept {
  std::forward<F>(x).internal += (1U << (std::decay_t<F>::b_actual - std::decay_t<F>::b)); // Rely on stated bits, not actual bits
  return std::forward<F>(x);
}

template <format F1, format F2>
FP_INLINE constexpr static
std::decay_t<F1>/*&*/
operator+=(F1&& x, F2&& z) {
  std::forward<F1>(x).internal += reformat<F1>(std::forward<F2>(z)).data[0];
  return std::forward<F1>(x);
}

template <format F1, format F2>
FP_INLINE constexpr static
std::decay_t<F1>/*&*/
operator-=(F1&& x, F2&& z) {
  std::forward<F1>(x).internal -= reformat<F1>(std::forward<F2>(z)).data[0];
  return std::forward<F1>(x);
}

// Euclidean transformation : [-1, 1) <-> [0, 1) in one bitwise XOR
template <format F>
requires (std::decay_t<F>::r == std::decay_t<F>::b - std::decay_t<F>::sign_bits)
FP_PURE static
t<fmt<std::decay_t<F>::b, util::flip_signedness<F>, std::decay_t<F>::b + (std::decay_t<F>::sign_bits ? 1 : -1)>>
rescale(F&& x)
noexcept {
  return t<fmt<std::decay_t<F>::b, util::flip_signedness<F>, std::decay_t<F>::b + (std::decay_t<F>::sign_bits ? 1 : -1)>>{
    static_cast<util::int_b<std::decay_t<F>::b_actual, util::flip_signedness<F>>>(
      std::forward<F>(x).internal ^ util::lshift<std::decay_t<F>::b_actual - 1>(1U)
    )
  };
}

#ifndef FP_NOSTR // String and stream operators

template <format F>
std::ostream& operator<<(std::ostream& os, F&& v) {
  return os << (std::forward<F>(v).operator std::string());
}

template <format F>
std::string operator+(std::string&& s, F&& v) {
  return std::move(s) + (std::forward<F>(v).operator std::string());
}

template <format F>
std::string operator+(std::string const& s, F&& v) {
  return s + (std::forward<F>(v).operator std::string());
}

template <format F>
std::string operator+(F&& v, std::string&& s) {
  return (std::forward<F>(v).operator std::string()) + std::move(s);
}

template <format F>
std::string operator+(F&& v, std::string const& s) {
  return (std::forward<F>(v).operator std::string()) + s;
}

template <format F>
std::string operator+(char const* const s, F&& v) {
  return s + (std::forward<F>(v).operator std::string());
}

template <format F>
std::string operator+(F&& v, char const* const s) {
  return (std::forward<F>(v).operator std::string()) + s;
}

#endif // FP_NOSTR



//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Ops on fp::t / tensors

template <any T1, format T2>
FP_PURE static
decltype(auto)
operator*(T1&& x, T2&& z)
noexcept {
  with_format<typename decltype(std::declval<typename std::decay_t<T1>::f>() * z)::f, T1> y;
  #pragma unroll
  for (std::size_t i = 0; i < std::decay_t<T1>::size; ++i) {
    y.get_unrolled(i) = x.get_unrolled(i) * z;
  }
  return y;
}
/* Commutative */ template <any T, format F> FP_PURE static decltype(auto) operator*(F&& z, T&& x) noexcept { return std::forward<T>(x) * std::forward<F>(z); }
/* One-element */ template <any T1, any T2> requires (/* below to prevent ambiguity */   std::decay_t<T2>::size ==                      1 ) FP_PURE static decltype(auto) operator*(T1&& x, T2&& z) noexcept { return std::forward<T1>(x) * std::forward<T2>(z).get_unrolled(0U); }
/* Commutative */ template <any T1, any T2> requires ((std::decay_t<T1>::size != 1) and (std::decay_t<T2>::size ==                      1)) FP_PURE static decltype(auto) operator*(T2&& z, T1&& x) noexcept { return std::forward<T1>(x) * std::forward<T2>(z).get_unrolled(0U); }
/* Equal sizes */ template <any T1, any T2> requires ((std::decay_t<T1>::size != 1) and (std::decay_t<T2>::size == std::decay_t<T1>::size)) FP_PURE static decltype(auto) operator*(T1&& x, T2&& z) noexcept { with_format<typename decltype(std::declval<typename std::decay_t<T1>::f>() * std::declval<typename std::decay_t<T2>::f>())::f, T1> y; for (std::size_t i = 0; i < std::decay_t<T1>::size; ++i) { y.get_unrolled(i) = std::forward<T1>(x).get_unrolled(i) * std::forward<T2>(z).get_unrolled(i); } return y; }

template <any T, format F>
FP_PURE static
std::decay_t<T>
operator+(T&& x, F&& z)
noexcept {
  std::decay_t<T> y;
  #pragma unroll
  for (std::size_t i = 0; i < std::decay_t<T>::size; ++i) {
    y.get_unrolled(i) = x.get_unrolled(i) + z;
  }
  return y;
}
/* Commutative */ template <any T, format F> FP_PURE static decltype(auto) operator+(F&& z, T&& x) noexcept { return std::forward<T>(x) + std::forward<F>(z); }
/* One-element */ template <any T1, any T2> requires (/* below to prevent ambiguity */   std::decay_t<T2>::size ==                      1 ) FP_PURE static decltype(auto) operator+(T1&& x, T2&& z) noexcept { return std::forward<T1>(x) + std::forward<T2>(z).get_unrolled(0U); }
/* Commutative */ template <any T1, any T2> requires ((std::decay_t<T1>::size != 1) and (std::decay_t<T2>::size ==                      1)) FP_PURE static decltype(auto) operator+(T2&& z, T1&& x) noexcept { return std::forward<T1>(x) + std::forward<T2>(z).get_unrolled(0U); }
/* Equal sizes */ template <any T1, any T2> requires ((std::decay_t<T1>::size != 1) and (std::decay_t<T2>::size == std::decay_t<T1>::size)) FP_PURE static decltype(auto) operator+(T1&& x, T2&& z) noexcept { std::decay_t<T1> y; for (std::size_t i = 0; i < std::decay_t<T1>::size; ++i) { y.get_unrolled(i) = std::forward<T1>(x).get_unrolled(i) + std::forward<T2>(z).get_unrolled(i); } return y; }

template <any T, format F>
FP_INLINE constexpr static
std::decay_t<T>&
operator+=(T& x, F&& z)
noexcept {
  for (std::size_t i = 0; i < std::decay_t<T>::size; ++i) {
    x.get_unrolled(i) += reformat<typename std::decay_t<T>::f>(std::forward<F>(z)).data[0];
  }
  return x;
}
/* Commutative */ template <any T, format F> requires (std::decay_t<T>::size == 1) FP_INLINE constexpr static std::decay_t<F>/*&*/ operator+=(F&& x, T&& z) noexcept { return operator+=(std::forward<F>(x), reformat<F>(std::forward<T>(z))); }
/* One-element */ template <any T1, any T2> requires ((std::decay_t<T1>::size == 1) and (std::decay_t<T2>::size == 1)) FP_INLINE constexpr static std::decay_t<T1>& operator+=(T1& x, T2&& z) noexcept { return x += std::forward<T2>(z).get_unrolled(0U); }

template <any T, format F>
FP_PURE static
std::decay_t<T>
operator-(T&& x, F&& z)
noexcept {
  std::decay_t<T> y;
  #pragma unroll
  for (std::size_t i = 0; i < std::decay_t<T>::size; ++i) {
    y.get_unrolled(i) = x.get_unrolled(i) - z;
  }
  return y;
}
// /* Commutative */ template <any T, format F> FP_PURE static decltype(auto) operator-(F&& z, T&& x) noexcept { return std::forward<T>(x) - std::forward<F>(z); }
/* One-element */ template <any T1, any T2> requires (/* below to prevent ambiguity */   std::decay_t<T2>::size ==                      1 ) FP_PURE static decltype(auto) operator-(T1&& x, T2&& z) noexcept { return std::forward<T1>(x) - std::forward<T2>(z).get_unrolled(0U); }
// /* Commutative */ template <any T1, any T2> requires ((std::decay_t<T1>::size != 1) and (std::decay_t<T2>::size ==                      1)) FP_PURE static decltype(auto) operator-(T2&& z, T1&& x) noexcept { return std::forward<T1>(x) - std::forward<T2>(z).get_unrolled(0U); }
/* Equal sizes */ template <any T1, any T2> requires ((std::decay_t<T1>::size != 1) and (std::decay_t<T2>::size == std::decay_t<T1>::size)) FP_PURE static decltype(auto) operator-(T1&& x, T2&& z) noexcept { std::decay_t<T1> y; for (std::size_t i = 0; i < std::decay_t<T1>::size; ++i) { y.get_unrolled(i) = std::forward<T1>(x).get_unrolled(i) - std::forward<T2>(z).get_unrolled(i); } return y; }

template <any T, format F>
FP_INLINE constexpr static
std::decay_t<T>&
operator-=(T&& x, F&& z) {
  for (std::size_t i = 0; i < std::decay_t<T>::size; ++i) {
    std::forward<T>(x).get_unrolled(i) -= reformat<typename std::decay_t<T>::f>(std::forward<F>(z)).get_unrolled(0U);
  }
  return std::forward<T>(x);
}
/* Commutative */ template <any T, format F> requires (std::decay_t<T>::size == 1) FP_INLINE constexpr static std::decay_t<F>/*&*/ operator-=(F&& x, T&& z) { return operator-=(std::forward<F>(x), reformat<F>(std::forward<T>(z))); }
/* One-element */ template <any T1, any T2> requires ( std::decay_t<T2>::size == 1   /* below to prevent ambiguity */) FP_INLINE constexpr static decltype(auto) operator-=(T1&& x, T2&& z) noexcept { return operator-=(x, z.get_unrolled(0U)); }
/* Equal sizes */ template <any T1, any T2> requires ((std::decay_t<T1>::size != 1) and (std::decay_t<T2>::size == std::decay_t<T1>::size)) FP_INLINE static std::decay_t<T1>& operator-=(T1& x, T2&& z) noexcept { for (std::size_t i = 0; i < std::decay_t<T1>::size; ++i) { x.get_unrolled(i) -= std::forward<T2>(z).get_unrolled(i); } return x; }

#ifndef FP_NOSTR

template <any T> requires (std::decay_t<T>::size == 1)
std::ostream& operator<<(std::ostream& os, T&& v) {
  return os << std::forward<T>(v).get_unrolled(0U);
}

template <any T> requires (std::decay_t<T>::size == 1)
std::string operator+(std::string&& s, T&& v) {
  return std::move(s) + std::forward<T>(v).get_unrolled(0U);
}

template <any T> requires (std::decay_t<T>::size == 1)
std::string operator+(std::string const& s, T&& v) {
  return s + std::forward<T>(v).get_unrolled(0U);
}

template <any T> requires (std::decay_t<T>::size == 1)
std::string operator+(T&& v, std::string&& s) {
  return std::forward<T>(v).get_unrolled(0U) + std::move(s);
}

template <any T> requires (std::decay_t<T>::size == 1)
std::string operator+(T&& v, std::string const& s) {
  return std::forward<T>(v).get_unrolled(0U) + s;
}

template <any T> requires (std::decay_t<T>::size == 1)
std::string operator+(char const* const s, T&& v) {
  return s + std::forward<T>(v).get_unrolled(0U);
}

template <any T> requires (std::decay_t<T>::size == 1)
std::string operator+(T&& v, char const* const s) {
  return std::forward<T>(v).get_unrolled(0U) + s;
}

template <any T> requires (std::decay_t<T>::size > 1)
std::ostream& operator<<(std::ostream& os, T&& v) {
  os << '(' << std::forward<T>(v).get_unrolled(0U);
  for (std::size_t i = 1; i < std::decay_t<T>::size; ++i) {
    os << ' ' << std::forward<T>(v).get_unrolled(i);
  }
  return os << ')';
}

#endif // FP_NOSTR

} // namespace fp

#undef FP_PURE
#undef FP_IMPURE
#undef FP_INLINE

#endif // FIXED_POINT_HPP
